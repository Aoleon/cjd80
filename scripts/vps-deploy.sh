#!/bin/bash
set -e

# ============================================================================
# Script de d√©ploiement VPS pour CJD Amiens (cjd80.fr)
# Ce script est ex√©cut√© sur le VPS par GitHub Actions
# ============================================================================

echo "=================================================="
echo "üöÄ D√©ploiement CJD Amiens - cjd80.fr"
echo "=================================================="

# Variables
DEPLOY_DIR="/docker/cjd80"
BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
CURRENT_IMAGE=$(docker compose images -q cjd-app 2>/dev/null || echo "none")

cd "$DEPLOY_DIR"

# ============================================================================
# 0. V√âRIFICATIONS PR√âLIMINAIRES
# ============================================================================
echo "üîç V√©rification des fichiers n√©cessaires..."

# V√©rifier que docker-compose.yml existe et n'est pas vide
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå ERREUR: Le fichier docker-compose.yml est manquant!"
    echo "   Le repository n'a peut-√™tre pas √©t√© synchronis√© correctement."
    exit 1
fi

if [ ! -s "docker-compose.yml" ]; then
    echo "‚ùå ERREUR: Le fichier docker-compose.yml est vide!"
    echo "   Le repository n'a peut-√™tre pas √©t√© synchronis√© correctement."
    exit 1
fi

echo "‚úÖ Fichier docker-compose.yml pr√©sent et valide"

# ============================================================================
# 1. BACKUP de l'image actuelle (pour rollback)
# ============================================================================
if [ "$CURRENT_IMAGE" != "none" ] && [ -n "$CURRENT_IMAGE" ]; then
    echo "üì¶ Sauvegarde de l'image actuelle pour rollback..."
    docker tag "$CURRENT_IMAGE" "ghcr.io/aoleon/cjd80:${BACKUP_TAG}" || true
    echo "‚úÖ Backup cr√©√©: ${BACKUP_TAG}"
fi

# ============================================================================
# 2. LOGIN au GitHub Container Registry
# ============================================================================
echo "üîê Connexion au GitHub Container Registry..."
if [ -f "$HOME/.docker/config.json" ]; then
    echo "‚úÖ D√©j√† authentifi√© √† GHCR"
else
    echo "‚ö†Ô∏è  Configuration Docker manquante - assurez-vous d'√™tre connect√© √† GHCR"
    echo "    Ex√©cutez: docker login ghcr.io -u USERNAME -p TOKEN"
fi

# ============================================================================
# 3. PULL de la nouvelle image
# ============================================================================
echo "‚¨áÔ∏è  T√©l√©chargement de la nouvelle image Docker..."
if [ -n "$DOCKER_IMAGE" ]; then
    echo "   Image: $DOCKER_IMAGE"
    docker pull "$DOCKER_IMAGE"
else
    echo "   Image: ghcr.io/aoleon/cjd80:latest (fallback)"
    docker pull ghcr.io/aoleon/cjd80:latest
    export DOCKER_IMAGE="ghcr.io/aoleon/cjd80:latest"
fi

# ============================================================================
# 4. MIGRATIONS de base de donn√©es
# ============================================================================
echo "üóÑÔ∏è  Ex√©cution des migrations de base de donn√©es..."

# V√©rifier si .env existe
if [ ! -f "$DEPLOY_DIR/.env" ]; then
    echo "‚ùå ERREUR: Fichier .env manquant!"
    echo "   Cr√©ez le fichier .env √† partir de .env.example"
    exit 1
fi

# Ex√©cuter les migrations dans un conteneur temporaire
docker compose run --rm \
    --no-deps \
    --entrypoint "npx drizzle-kit push" \
    cjd-app || {
    echo "‚ö†Ô∏è  Warning: Migration failed, continuing anyway (might be up to date)"
}

echo "‚úÖ Migrations termin√©es"

# ============================================================================
# 5. D√âPLOIEMENT de la nouvelle version
# ============================================================================
echo "üîÑ D√©marrage de la nouvelle version..."

# Arr√™ter l'ancienne version (sans supprimer les volumes)
docker compose down --remove-orphans

# D√©marrer la nouvelle version
docker compose up -d

echo "‚è≥ Attente du d√©marrage de l'application (60s max)..."

# ============================================================================
# 6. HEALTH CHECK
# ============================================================================
HEALTH_CHECK_MAX_ATTEMPTS=30
HEALTH_CHECK_ATTEMPT=0
HEALTH_CHECK_PASSED=false

while [ $HEALTH_CHECK_ATTEMPT -lt $HEALTH_CHECK_MAX_ATTEMPTS ]; do
    HEALTH_CHECK_ATTEMPT=$((HEALTH_CHECK_ATTEMPT + 1))
    
    # V√©rifier le health check
    if docker compose exec -T cjd-app wget --spider -q http://localhost:5000/api/health 2>/dev/null; then
        echo "‚úÖ Health check r√©ussi!"
        HEALTH_CHECK_PASSED=true
        break
    fi
    
    echo "   Tentative $HEALTH_CHECK_ATTEMPT/$HEALTH_CHECK_MAX_ATTEMPTS..."
    sleep 2
done

# ============================================================================
# 7. ROLLBACK si n√©cessaire
# ============================================================================
if [ "$HEALTH_CHECK_PASSED" = false ]; then
    echo ""
    echo "‚ùå ERREUR: Le health check a √©chou√©!"
    echo "üìã Logs de l'application:"
    docker compose logs --tail=50 cjd-app
    
    if [ "$CURRENT_IMAGE" != "none" ] && [ -n "$CURRENT_IMAGE" ]; then
        echo ""
        echo "üîÑ ROLLBACK vers la version pr√©c√©dente..."
        
        # Restaurer l'ancienne version
        export DOCKER_IMAGE="ghcr.io/aoleon/cjd80:${BACKUP_TAG}"
        docker compose down
        docker compose up -d
        
        echo "‚úÖ Rollback effectu√© vers ${BACKUP_TAG}"
        echo "‚ö†Ô∏è  Le d√©ploiement a √©chou√© et a √©t√© annul√©"
        exit 1
    else
        echo "‚ö†Ô∏è  Pas de version pr√©c√©dente pour rollback"
        exit 1
    fi
fi

# ============================================================================
# 8. SUCC√àS - Nettoyage
# ============================================================================
echo ""
echo "=================================================="
echo "‚úÖ D√©ploiement r√©ussi!"
echo "=================================================="
echo "üì¶ Image: $DOCKER_IMAGE"
echo "üîó URL: https://cjd80.fr"
echo "üíö Health check: https://cjd80.fr/api/health"
echo ""

# Afficher le statut
docker compose ps

echo ""
echo "üìä Statistiques du conteneur:"
docker stats --no-stream cjd-app

exit 0
