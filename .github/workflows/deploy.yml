name: Deploy to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Precheck secrets
        env:
          VPS_SSH_KEY:     ${{ secrets.VPS_SSH_KEY }}
          VPS_SSH_KEY_B64: ${{ secrets.VPS_SSH_KEY_B64 }}
          VPS_HOST:        ${{ secrets.VPS_HOST }}
          VPS_PORT:        ${{ secrets.VPS_PORT }}
          VPS_USER:        ${{ secrets.VPS_USER }}
          GH_TOKEN:    ${{ secrets.GH_TOKEN }}
          GH_REPO_OWNER: ${{ secrets.GH_REPO_OWNER }}
          GH_REPO_NAME:  ${{ secrets.GH_REPO_NAME }}
        run: |
          set -e
          for v in VPS_HOST VPS_PORT VPS_USER GH_TOKEN GH_REPO_OWNER GH_REPO_NAME; do
            if [ -z "${!v}" ]; then echo "::error::Missing secret: $v"; exit 1; fi
          done
          if [ -z "${VPS_SSH_KEY}" ] && [ -z "${VPS_SSH_KEY_B64}" ]; then
            echo "::error::Provide VPS_SSH_KEY (OpenSSH) OR VPS_SSH_KEY_B64 (base64)"; exit 1
          fi

      - name: Write SSH key & start agent (auto-detect raw vs b64)
        env:
          VPS_SSH_KEY:     ${{ secrets.VPS_SSH_KEY }}
          VPS_SSH_KEY_B64: ${{ secrets.VPS_SSH_KEY_B64 }}
        run: |
          set -e
          mkdir -p ~/.ssh
          umask 077

          if [ -n "$VPS_SSH_KEY" ] && printf '%s' "$VPS_SSH_KEY" | grep -q 'BEGIN OPENSSH'; then
            # ClÃ© privÃ©e brute OpenSSH
            printf '%s\n' "$VPS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
          elif [ -n "$VPS_SSH_KEY_B64" ]; then
            # Variante base64 (une seule ligne)
            echo "$VPS_SSH_KEY_B64" | tr -d '\r\n ' | base64 -d > ~/.ssh/id_ed25519 || { echo "::error::VPS_SSH_KEY_B64 is not valid base64"; exit 1; }
          else
            echo "::error::No valid key provided"; exit 1
          fi

          # Petit contrÃ´le format
          head -1 ~/.ssh/id_ed25519 | grep -q 'BEGIN OPENSSH' || { echo "::error::SSH key file header is wrong"; exit 1; }
          tail -1 ~/.ssh/id_ed25519 | grep -q 'END OPENSSH'   || { echo "::error::SSH key file footer is wrong"; exit 1; }

          # DÃ©marre l'agent et charge la clÃ©
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

      - name: Trust VPS host key
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$VPS_PORT" "$VPS_HOST" >> ~/.ssh/known_hosts

      - name: Deploy on VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          VPS_USER: ${{ secrets.VPS_USER }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_REPO_OWNER: ${{ secrets.GH_REPO_OWNER }}
          GH_REPO_NAME: ${{ secrets.GH_REPO_NAME }}
        run: |
          ssh -p "$VPS_PORT" "$VPS_USER@$VPS_HOST" "
            export GITHUB_TOKEN='$GH_TOKEN'
            export GITHUB_REPO_OWNER='$GH_REPO_OWNER'
            export GITHUB_REPO_NAME='$GH_REPO_NAME'
            bash /docker/cjd80/deploy.sh
          "

      - name: Cleanup old Docker containers & images on VPS
        if: always()
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -p "$VPS_PORT" "$VPS_USER@$VPS_HOST" "
            echo 'ðŸ§¹ Nettoyage des vieux conteneurs et images...';
            docker container prune -f;
            docker image prune -af;
            docker volume prune -f;
          "
