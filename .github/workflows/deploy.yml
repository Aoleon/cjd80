name: Deploy to VPS (cjd80.fr)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate image tag
        id: image-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          TAG="${{ env.REGISTRY }}/${REPO_LOWER}:main-${SHORT_SHA}"
          LATEST_TAG="${{ env.REGISTRY }}/${REPO_LOWER}:latest"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "latest=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "🏷️ Image tag: ${TAG}"
          echo "🏷️ Latest tag: ${LATEST_TAG}"
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.image-tag.outputs.tag }}
            ${{ steps.image-tag.outputs.latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: https://cjd80.fr
    
    steps:
      - name: Precheck secrets
        env:
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          set -e
          for v in VPS_SSH_KEY VPS_HOST VPS_PORT VPS_USER; do
            if [ -z "${!v}" ]; then 
              echo "::error::Missing secret: $v"
              exit 1
            fi
          done
          echo "✅ Tous les secrets requis sont configurés"
      
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: Prepare VPS directories and repository
        run: |
          ssh -p ${{ secrets.VPS_PORT }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'bash -s' << 'ENDSSH'
          set -e
          
          # Créer le répertoire si nécessaire
          mkdir -p /docker/cjd80/scripts
          
          # Cloner le repository si pas déjà présent
          if [ ! -d "/docker/cjd80/.git" ]; then
            echo "📦 Clonage initial du repository..."
            cd /docker/cjd80
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
            git fetch origin main
            git reset --hard origin/main
          else
            echo "🔄 Mise à jour du repository..."
            cd /docker/cjd80
            git fetch origin main
            git reset --hard origin/main
          fi
          
          # Vérifier que .env existe
          if [ ! -f "/docker/cjd80/.env" ]; then
            echo "⚠️  ATTENTION: Le fichier .env n'existe pas encore!"
            echo "   Vous devez le créer à partir de .env.example"
            if [ -f "/docker/cjd80/.env.example" ]; then
              echo "   Fichier .env.example disponible comme référence"
            fi
          fi
          
          echo "✅ Préparation du VPS terminée"
          ENDSSH
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          command_timeout: 25m
          envs: IMAGE_TAG
          script: |
            set -e
            
            echo "🚀 Déploiement de l'image: ${IMAGE_TAG}"
            
            cd /docker/cjd80
            
            # Mise à jour du repository (sans écraser les fichiers locaux comme .env)
            echo "🔄 Mise à jour du repository..."
            git fetch origin main
            git pull --ff-only origin main || {
              echo "⚠️  Fast-forward impossible, utilisation de la version préparée"
            }
            chmod +x scripts/vps-deploy.sh
            echo "✅ Repository à jour"
            
            # Exporter l'image tag pour docker-compose
            export DOCKER_IMAGE="${IMAGE_TAG}"
            
            # Exécuter le script de déploiement
            bash scripts/vps-deploy.sh
      
      - name: Verify deployment health
        run: |
          echo "🔍 Vérification du déploiement..."
          sleep 10
          
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            
            if curl -f -s -o /dev/null -w "%{http_code}" https://cjd80.fr/api/health | grep -q "200"; then
              echo "✅ Déploiement réussi! Application en ligne sur https://cjd80.fr"
              curl -s https://cjd80.fr/api/health | jq '.' || true
              exit 0
            fi
            
            echo "⏳ Tentative $ATTEMPT/$MAX_ATTEMPTS: En attente de la réponse..."
            sleep 2
          done
          
          echo "❌ Le health check a échoué après $((MAX_ATTEMPTS * 2)) secondes"
          echo "📋 Logs du conteneur (dernières 50 lignes):"
          ssh -p ${{ secrets.VPS_PORT }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "cd /docker/cjd80 && docker compose logs --tail=50 cjd-app"
          exit 1
      
      - name: Cleanup old images on VPS
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          command_timeout: 5m
          script: |
            echo '🧹 Nettoyage des anciennes images Docker...'
            docker image prune -f
            docker container prune -f
            echo '✅ Nettoyage terminé'
      
      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 ✅ Déploiement réussi sur https://cjd80.fr"
            echo "📦 Image: ${{ needs.build-and-push.outputs.image_tag }}"
            echo "🔗 Health check: https://cjd80.fr/api/health"
          else
            echo "❌ Échec du déploiement"
            echo "📋 Vérifiez les logs ci-dessus pour plus de détails"
          fi
