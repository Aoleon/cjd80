# Configuration Docker Compose pour production avec Traefik
# L'image est fournie via la variable DOCKER_IMAGE depuis GitHub Actions

services:
  cjd-app:
    # Image depuis GHCR (fournie par GitHub Actions)
    image: ${DOCKER_IMAGE:-ghcr.io/aoleon/cjd80:latest}
    container_name: cjd-app
    restart: unless-stopped
    
    # Pas de publication de port - Traefik gère le routage
    expose:
      - "5000"
    
    # Variables d'environnement
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=5000
    
    # Labels Traefik pour le routage et SSL
    labels:
      - "traefik.enable=true"
      # Routeur HTTP -> HTTPS redirect (géré par Traefik globalement)
      - "traefik.http.routers.cjd80.rule=Host(`cjd80.fr`)"
      - "traefik.http.routers.cjd80.entrypoints=websecure"
      - "traefik.http.routers.cjd80.tls=true"
      - "traefik.http.routers.cjd80.tls.certresolver=letsencrypt"
      # Service
      - "traefik.http.services.cjd80.loadbalancer.server.port=5000"
      # Health check pour Traefik
      - "traefik.http.services.cjd80.loadbalancer.healthcheck.path=/api/health"
      - "traefik.http.services.cjd80.loadbalancer.healthcheck.interval=30s"
    
    # Health check Docker natif
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Volumes pour persistance
    volumes:
      - ./logs:/app/logs
    
    # Réseaux
    networks:
      - proxy        # Réseau externe Traefik pour exposition publique
      - cjd-network  # Réseau interne pour isolation
    
    # Limites de ressources
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

networks:
  # Réseau externe Traefik (doit exister)
  proxy:
    external: true
  
  # Réseau interne pour l'application
  cjd-network:
    driver: bridge
