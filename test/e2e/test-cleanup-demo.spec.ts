import { test, expect } from '../fixtures';
import { 
  generateTestIdea, 
  generateTestEvent,
  generateTestVote,
  generateTestInscription
} from '../helpers/test-data';

/**
 * Test de d√©monstration du syst√®me de nettoyage automatique
 * 
 * Ce test d√©montre comment :
 * 1. Utiliser les fixtures personnalis√©es qui nettoient automatiquement les donn√©es
 * 2. G√©n√©rer des donn√©es de test reconnaissables avec les helpers
 * 3. Cr√©er des donn√©es via API qui seront automatiquement supprim√©es apr√®s le test
 */

test.describe('Syst√®me de nettoyage automatique - D√©monstration', () => {
  
  test('should create and auto-cleanup test idea', async ({ page }) => {
    // G√©n√©rer des donn√©es de test
    const testIdea = generateTestIdea({
      title: 'Am√©lioration du syst√®me',
      description: 'Ceci est une id√©e de test qui sera automatiquement supprim√©e',
    });

    // Cr√©er l'id√©e via l'API
    const response = await page.request.post('/api/ideas', {
      data: {
        title: testIdea.title,
        description: testIdea.description,
        proposedBy: testIdea.proposedBy,
        proposedByEmail: testIdea.proposedByEmail,
      }
    });

    // V√©rifier que la cr√©ation a r√©ussi
    expect(response.ok()).toBeTruthy();
    
    const createdIdea = await response.json();
    console.log(`[Test Cleanup Demo] Id√©e cr√©√©e avec ID: ${createdIdea.id}`);
    console.log(`[Test Cleanup Demo] Titre: ${testIdea.title}`);
    console.log(`[Test Cleanup Demo] ‚úÖ Cette id√©e sera automatiquement supprim√©e apr√®s le test`);
    
    // V√©rifier que l'id√©e existe
    const getResponse = await page.request.get(`/api/ideas`);
    expect(getResponse.ok()).toBeTruthy();
    
    const ideas = await getResponse.json();
    const foundIdea = ideas.data?.data?.find((i: any) => i.title === testIdea.title);
    expect(foundIdea).toBeDefined();
    
    // Note: Apr√®s ce test, la fixture autoCleanup supprimera automatiquement cette id√©e
  });

  test('should create and auto-cleanup test vote', async ({ page }) => {
    // D'abord cr√©er une id√©e pour pouvoir voter
    const testIdea = generateTestIdea();
    
    const ideaResponse = await page.request.post('/api/ideas', {
      data: {
        title: testIdea.title,
        description: testIdea.description,
        proposedBy: testIdea.proposedBy,
        proposedByEmail: testIdea.proposedByEmail,
      }
    });
    
    const createdIdea = await ideaResponse.json();
    
    // G√©n√©rer des donn√©es de vote
    const testVote = generateTestVote({
      voterName: 'Votant de test'
    });
    
    // Cr√©er le vote
    const voteResponse = await page.request.post('/api/votes', {
      data: {
        ideaId: createdIdea.id,
        voterName: testVote.voterName,
        voterEmail: testVote.voterEmail,
      }
    });
    
    expect(voteResponse.ok()).toBeTruthy();
    
    console.log(`[Test Cleanup Demo] Vote cr√©√© pour l'id√©e: ${createdIdea.id}`);
    console.log(`[Test Cleanup Demo] Votant: ${testVote.voterEmail}`);
    console.log(`[Test Cleanup Demo] ‚úÖ Ce vote sera automatiquement supprim√© apr√®s le test`);
    
    // Note: Le vote ET l'id√©e seront supprim√©s automatiquement
  });

  test('should create and auto-cleanup test event and inscription', async ({ page }) => {
    // G√©n√©rer un √©v√©nement de test
    const testEvent = generateTestEvent({
      title: '√âv√©nement de test',
      daysFromNow: 15,
      location: 'Salle de test'
    });
    
    // Cr√©er l'√©v√©nement
    const eventResponse = await page.request.post('/api/admin/events', {
      data: {
        title: testEvent.title,
        description: testEvent.description,
        date: testEvent.date.toISOString(),
        location: testEvent.location,
      }
    });
    
    // Note: Cette requ√™te peut √©chouer si l'utilisateur n'est pas authentifi√©
    // C'est normal dans un test de d√©monstration
    if (eventResponse.ok()) {
      const createdEvent = await eventResponse.json();
      console.log(`[Test Cleanup Demo] √âv√©nement cr√©√© avec ID: ${createdEvent.id}`);
      
      // G√©n√©rer une inscription
      const testInscription = generateTestInscription({
        name: 'Participant de test',
        includePhone: true
      });
      
      // Cr√©er l'inscription
      const inscriptionResponse = await page.request.post('/api/inscriptions', {
        data: {
          eventId: createdEvent.id,
          name: testInscription.name,
          email: testInscription.email,
          company: testInscription.company,
          phone: testInscription.phone,
        }
      });
      
      if (inscriptionResponse.ok()) {
        console.log(`[Test Cleanup Demo] Inscription cr√©√©e pour: ${testInscription.email}`);
        console.log(`[Test Cleanup Demo] ‚úÖ L'inscription et l'√©v√©nement seront automatiquement supprim√©s`);
      }
    } else {
      console.log(`[Test Cleanup Demo] ‚ö†Ô∏è  √âv√©nement non cr√©√© (authentification requise)`);
    }
  });

  test('should demonstrate multiple test data creation', async ({ page }) => {
    // Cr√©er plusieurs id√©es de test
    const ideas = [
      generateTestIdea({ title: 'Id√©e 1' }),
      generateTestIdea({ title: 'Id√©e 2' }),
      generateTestIdea({ title: 'Id√©e 3' }),
    ];
    
    let createdCount = 0;
    
    for (const idea of ideas) {
      const response = await page.request.post('/api/ideas', {
        data: {
          title: idea.title,
          description: idea.description,
          proposedBy: idea.proposedBy,
          proposedByEmail: idea.proposedByEmail,
        }
      });
      
      if (response.ok()) {
        createdCount++;
      }
    }
    
    console.log(`[Test Cleanup Demo] ${createdCount} id√©es cr√©√©es`);
    console.log(`[Test Cleanup Demo] ‚úÖ Toutes les id√©es seront automatiquement supprim√©es apr√®s le test`);
    
    expect(createdCount).toBeGreaterThan(0);
    
    // Note: Toutes les id√©es seront nettoy√©es automatiquement gr√¢ce √† la fixture autoCleanup
  });
});

/**
 * Pour v√©rifier que le nettoyage fonctionne :
 * 
 * 1. Ex√©cuter ce test : npx playwright test test-cleanup-demo
 * 2. V√©rifier dans la console les messages de nettoyage
 * 3. V√©rifier la base de donn√©es - aucune donn√©e de test ne devrait rester
 * 
 * Les logs de nettoyage ressembleront √† :
 * [Cleanup] üßπ D√©but du nettoyage des donn√©es de test...
 * [Cleanup] ‚úÖ Nettoyage termin√© : X enregistrement(s) supprim√©(s)
 */
